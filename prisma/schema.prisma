// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  @@index([ownerId, status])
}

model SkillWorkflow {
  id          String                 @id @default(uuid()) @db.Uuid
  name        String
  version     Int                    @default(1)
  description String?
  entrypoint  String
  parameters  Json
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  runReflections SkillRunReflection[]

  @@unique([name, version])
}

model SkillRunReflection {
  id                String        @id @default(uuid()) @db.Uuid
  skillWorkflowId   String        @db.Uuid
  skillWorkflow     SkillWorkflow @relation(fields: [skillWorkflowId], references: [id], onDelete: Cascade)
  runId             String        @db.Uuid
  outcome           String
  success           Boolean
  verificationPayload Json?
  latencyMs         Int?
  createdAt         DateTime      @default(now())

  @@index([skillWorkflowId, createdAt])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}