version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: soft-sme-db
    environment:
      POSTGRES_DB: soft_sme_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./soft-sme-backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - soft-sme-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: soft-sme-backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: soft_sme_db
      DB_USER: postgres
      DB_PASSWORD: your_secure_password
      JWT_SECRET: your_super_secure_jwt_secret_key_here
      JWT_REFRESH_SECRET: your_super_secure_refresh_secret_key_here
      CORS_ORIGIN: http://localhost:3000
      SESSION_SECRET: your_session_secret_key_here
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - soft-sme-network
    volumes:
      - ./soft-sme-backend/uploads:/app/uploads
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: soft-sme-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - soft-sme-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  soft-sme-network:
    driver: bridge 