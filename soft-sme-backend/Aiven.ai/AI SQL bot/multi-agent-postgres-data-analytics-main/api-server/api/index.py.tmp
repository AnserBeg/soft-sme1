            part_resolution,
        )

        # Legacy hours examples (no longer used)
        hours_examples_legacy = (
            "Patterns for hours calculations (copy these shapes):\n\n"
            "-- Attendance (preferred): duration is paid (already net of lunch) ? just sum duration\n"
            "SELECT asf.profile_id, SUM(COALESCE(asf.duration, 0)) AS total_hours\n"
            "FROM attendance_shifts asf\n"
            "GROUP BY asf.profile_id;\n\n"
            "-- Attendance (fallback if duration missing): derive from times, deduct 0.5 once per shift that overlaps noon\n"
            "WITH shifts AS (\n"
            "  SELECT asf.profile_id,\n"
            "         (asf.clock_in AT TIME ZONE 'America/Denver')::date AS local_date,\n"
            "         asf.clock_in AT TIME ZONE 'America/Denver' AS cin_local,\n"
            "         asf.clock_out AT TIME ZONE 'America/Denver' AS cout_local,\n"
            "         EXTRACT(EPOCH FROM ((asf.clock_out AT TIME ZONE 'America/Denver') - (asf.clock_in AT TIME ZONE 'America/Denver'))) / 3600.0 AS raw_hours\n"
            "  FROM attendance_shifts AS asf\n"
            "), shifts_with_deduction AS (\n"
            "  SELECT s.profile_id, s.local_date,\n"
            "         CASE WHEN s.cin_local < (s.local_date + TIME '12:30')::timestamp\n"
            "                    AND s.cout_local > (s.local_date + TIME '12:00')::timestamp\n"
            "              THEN GREATEST(s.raw_hours - 0.5, 0) ELSE s.raw_hours END AS paid_hours\n"
            "  FROM shifts s\n"
            ") SELECT profile_id, SUM(paid_hours) AS total_hours FROM shifts_with_deduction GROUP BY profile_id;\n\n"
            "-- Time entries: if shift_id exists, group to one row per shift first\n"
            "WITH entry_shifts AS (\n"
            "  SELECT te.shift_id, te.profile_id,\n"
            "         MIN(te.clock_in AT TIME ZONE 'America/Denver') AS cin_local,\n"
            "         MAX(COALESCE(te.clock_out, now()) AT TIME ZONE 'America/Denver') AS cout_local,\n"
            "         COALESCE(SUM(te.duration), 0) AS raw_hours\n"
            "  FROM time_entries te GROUP BY te.shift_id, te.profile_id\n"
            "), shifts_with_deduction AS (\n"
            "  SELECT es.profile_id,\n"
            "         CASE WHEN es.cin_local::date IS NOT NULL THEN es.cin_local::date ELSE (es.cout_local::date) END AS local_date,\n"
            "         CASE WHEN es.cin_local < ( (es.cin_local::date) + TIME '12:30')::timestamp\n"
            "                    AND es.cout_local > ( (es.cin_local::date) + TIME '12:00')::timestamp\n"
            "              THEN GREATEST(es.raw_hours - 0.5, 0) ELSE es.raw_hours END AS paid_hours\n"
            "  FROM entry_shifts es\n"
            ") SELECT profile_id, SUM(paid_hours) AS total_hours FROM shifts_with_deduction GROUP BY profile_id;\n\n"
            "-- Time entries without shift_id: approximate per person+local_date (deduct once per day)\n"
            "WITH person_day AS (\n"
            "  SELECT te.profile_id,\n"
            "         (MIN(te.clock_in) AT TIME ZONE 'America/Denver')::date AS local_date,\n"
            "         MIN(te.clock_in AT TIME ZONE 'America/Denver') AS cin_local,\n"
            "         MAX(COALESCE(te.clock_out, now()) AT TIME ZONE 'America/Denver') AS cout_local,\n"
            "         COALESCE(SUM(te.duration), 0) AS raw_hours\n"
            "  FROM time_entries te GROUP BY te.profile_id\n"
            "), person_day_with_deduction AS (\n"
            "  SELECT pd.profile_id, pd.local_date,\n"
            "         CASE WHEN pd.cin_local < (pd.local_date + TIME '12:30')::timestamp\n"
            "                    AND pd.cout_local > (pd.local_date + TIME '12:00')::timestamp\n"
            "              THEN GREATEST(pd.raw_hours - 0.5, 0) ELSE pd.raw_hours END AS paid_hours\n"
            "  FROM person_day pd\n"
            ") SELECT profile_id, SUM(paid_hours) AS total_hours FROM person_day_with_deduction GROUP BY profile_id;\n\n"
            "-- Raw events request (no deduction): return exact clock_in/clock_out rows\n"
            "SELECT p.name, te.clock_in, te.clock_out FROM time_entries te JOIN profiles p ON p.id = te.profile_id;\n"
        )
        # Override hours_examples to ensure we always use duration columns and never mention breaks
        hours_examples = (
            "Patterns for hours calculations (copy these shapes):\n\n"
            "-- Attendance (preferred): sum duration\n"
            "SELECT asf.profile_id, SUM(COALESCE(asf.duration, 0)) AS total_hours\n"
            "FROM attendance_shifts asf\n"
            "GROUP BY asf.profile_id;\n\n"
            "-- Time entries with shift_id: aggregate to one row per shift first, summing duration\n"
            "WITH entry_shifts AS (\n"
            "  SELECT te.shift_id, te.profile_id, COALESCE(SUM(te.duration), 0) AS shift_hours\n"
            "  FROM time_entries te\n"
            "  GROUP BY te.shift_id, te.profile_id\n"
            ") SELECT profile_id, SUM(shift_hours) AS total_hours FROM entry_shifts GROUP BY profile_id;\n\n"
            "-- Time entries without shift_id: approximate per person+local_date by summing duration\n"
            "WITH person_day AS (\n"
